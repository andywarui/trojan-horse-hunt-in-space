{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a5d78974",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:05.362773Z",
     "iopub.status.busy": "2025-08-27T14:12:05.362403Z",
     "iopub.status.idle": "2025-08-27T14:12:05.370659Z",
     "shell.execute_reply": "2025-08-27T14:12:05.369698Z"
    },
    "papermill": {
     "duration": 0.016825,
     "end_time": "2025-08-27T14:12:05.372464",
     "exception": false,
     "start_time": "2025-08-27T14:12:05.355639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ==========================\n",
    "# Step 0 — Controls\n",
    "# ==========================\n",
    "MODE = \"fast\"        # \"fast\" for quick dry-run | \"full\" for leaderboard runs\n",
    "SEED = 1337\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e79d3780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:05.382937Z",
     "iopub.status.busy": "2025-08-27T14:12:05.382580Z",
     "iopub.status.idle": "2025-08-27T14:12:16.283954Z",
     "shell.execute_reply": "2025-08-27T14:12:16.282630Z"
    },
    "papermill": {
     "duration": 10.908645,
     "end_time": "2025-08-27T14:12:16.285706",
     "exception": false,
     "start_time": "2025-08-27T14:12:05.377061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[env] Device=cpu | MODE=fast | SEED=1337\n"
     ]
    }
   ],
   "source": [
    "# ==========================\n",
    "# Step 1 — Imports & seeds\n",
    "# ==========================\n",
    "import os, re, math, glob, json, random, warnings, textwrap\n",
    "from pathlib import Path\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "from scipy.signal import savgol_filter\n",
    "from tqdm.auto import tqdm\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "\n",
    "def set_all_seeds(seed: int = 1337):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed_all(seed)\n",
    "    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.benchmark = False\n",
    "\n",
    "set_all_seeds(SEED)\n",
    "print(f\"[env] Device={DEVICE} | MODE={MODE} | SEED={SEED}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fa1b2061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:16.295902Z",
     "iopub.status.busy": "2025-08-27T14:12:16.295359Z",
     "iopub.status.idle": "2025-08-27T14:12:16.306385Z",
     "shell.execute_reply": "2025-08-27T14:12:16.305070Z"
    },
    "papermill": {
     "duration": 0.018406,
     "end_time": "2025-08-27T14:12:16.308415",
     "exception": false,
     "start_time": "2025-08-27T14:12:16.290009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[io] Using sample schema: /kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv\n"
     ]
    }
   ],
   "source": [
    "# =========================================\n",
    "# Step 2 — Paths; locate sample submission\n",
    "# =========================================\n",
    "ROOT = Path(\"/kaggle/input/trojan-horse-hunt-in-space\")\n",
    "CLEAN_MODEL_DIR = ROOT / \"clean_model\"\n",
    "POISON_DIR = ROOT / \"poisoned_models\"\n",
    "CLEAN_CSV = ROOT / \"clean_train_data.csv\"\n",
    "\n",
    "# Prefer sample_submission_solution.csv (as in your dataset)\n",
    "SAMPLE_SUB = ROOT / \"sample_submission_solution.csv\"\n",
    "if not SAMPLE_SUB.exists():\n",
    "    alt = ROOT / \"sample_submission.csv\"\n",
    "    if alt.exists():\n",
    "        SAMPLE_SUB = alt\n",
    "if not SAMPLE_SUB.exists():\n",
    "    raise FileNotFoundError(\"Could not find sample_submission_solution.csv or sample_submission.csv\")\n",
    "\n",
    "print(f\"[io] Using sample schema: {SAMPLE_SUB}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8531310",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:16.318922Z",
     "iopub.status.busy": "2025-08-27T14:12:16.318510Z",
     "iopub.status.idle": "2025-08-27T14:12:17.250973Z",
     "shell.execute_reply": "2025-08-27T14:12:17.249805Z"
    },
    "papermill": {
     "duration": 0.940593,
     "end_time": "2025-08-27T14:12:17.253140",
     "exception": false,
     "start_time": "2025-08-27T14:12:16.312547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[data] clean_train_data.csv → shape=(600000, 3) | cols=['id', 'channel_44', 'channel_45']\n",
      "[stats] channel mins: [0. 0. 0.]\n",
      "[stats] channel maxs: [5.9999900e+05 9.6987754e-01 9.9779576e-01]\n"
     ]
    }
   ],
   "source": [
    "# ===================================================\n",
    "# Step 3 — Load clean CSV; compute channel min/max\n",
    "# ===================================================\n",
    "def load_clean_dataframe(path: Path, max_rows: int = 600_000):\n",
    "    df = pd.read_csv(path)\n",
    "    num = df.select_dtypes(include=[np.number])\n",
    "    if num.shape[0] == 0 or num.shape[1] == 0:\n",
    "        raise ValueError(\"clean_train_data.csv has no numeric columns.\")\n",
    "    if num.shape[0] > max_rows:\n",
    "        num = num.iloc[:max_rows].copy()\n",
    "    # Keep up to 3 highest-variance numeric channels\n",
    "    if num.shape[1] > 3:\n",
    "        keep = list(num.var(axis=0).sort_values(ascending=False).index[:3])\n",
    "        num = num[keep]\n",
    "    # If fewer than 3 channels, pad by tiling last column\n",
    "    while num.shape[1] < 3:\n",
    "        num[f\"pad_{num.shape[1]}\"] = num.iloc[:, -1].values\n",
    "    return num\n",
    "\n",
    "NUM_DF = load_clean_dataframe(CLEAN_CSV)\n",
    "print(f\"[data] clean_train_data.csv → shape={NUM_DF.shape} | cols={list(NUM_DF.columns)}\")\n",
    "\n",
    "CHAN_MINS = NUM_DF.min(axis=0).values.astype(np.float32)[:3]\n",
    "CHAN_MAXS = NUM_DF.max(axis=0).values.astype(np.float32)[:3]\n",
    "print(f\"[stats] channel mins: {CHAN_MINS}\")\n",
    "print(f\"[stats] channel maxs: {CHAN_MAXS}\")\n",
    "\n",
    "TRIG_LEN = 75\n",
    "N_CH = 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e62d5249",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:17.266196Z",
     "iopub.status.busy": "2025-08-27T14:12:17.265870Z",
     "iopub.status.idle": "2025-08-27T14:12:18.222025Z",
     "shell.execute_reply": "2025-08-27T14:12:18.220518Z"
    },
    "papermill": {
     "duration": 0.96485,
     "end_time": "2025-08-27T14:12:18.224191",
     "exception": false,
     "start_time": "2025-08-27T14:12:17.259341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[io] Clean model path: /kaggle/input/trojan-horse-hunt-in-space/clean_model/clean_model.pt\n",
      "[io] Selected 45 poisoned model files from subfolders.\n",
      "    poisoned_model_1 -> poisoned_model.pt\n",
      "    poisoned_model_2 -> poisoned_model.pt\n",
      "    poisoned_model_3 -> poisoned_model.pt\n",
      "    poisoned_model_4 -> poisoned_model.pt\n",
      "    poisoned_model_5 -> poisoned_model.pt\n",
      "[models] using 45 poisoned models\n"
     ]
    }
   ],
   "source": [
    "# =================================================================\n",
    "# Step 4 — Robust model loaders + recursive poisoned model discovery\n",
    "# =================================================================\n",
    "class GenericModelWrapper(nn.Module):\n",
    "    \"\"\"Resilient wrapper around various checkpoint types.\"\"\"\n",
    "    def __init__(self, obj):\n",
    "        super().__init__()\n",
    "        self.obj = obj\n",
    "\n",
    "    def forward(self, x):\n",
    "        if hasattr(self.obj, \"forecast\"):\n",
    "            return self.obj.forecast(x)\n",
    "        if hasattr(self.obj, \"forward\"):\n",
    "            return self.obj.forward(x)\n",
    "        # Fallback: identity (keeps pipeline running even if model can't be restored)\n",
    "        return x\n",
    "\n",
    "def try_load_model(path: Path):\n",
    "    obj = None\n",
    "    try:\n",
    "        obj = torch.load(path, map_location=DEVICE)\n",
    "    except Exception:\n",
    "        try:\n",
    "            obj = torch.jit.load(str(path), map_location=DEVICE)\n",
    "        except Exception:\n",
    "            obj = None\n",
    "\n",
    "    if isinstance(obj, (nn.Module, torch.jit.ScriptModule)):\n",
    "        model = obj\n",
    "    elif isinstance(obj, dict) and \"state_dict\" in obj:\n",
    "        dummy = nn.Identity()\n",
    "        try:\n",
    "            dummy.load_state_dict(obj[\"state_dict\"], strict=False)\n",
    "        except Exception:\n",
    "            pass\n",
    "        model = dummy\n",
    "    else:\n",
    "        model = nn.Identity()\n",
    "\n",
    "    return GenericModelWrapper(model).to(DEVICE).eval()\n",
    "\n",
    "def best_clean_model_path():\n",
    "    for c in (CLEAN_MODEL_DIR/\"clean_model.pt\",\n",
    "              CLEAN_MODEL_DIR/\"clean_model.pt.ckpt\",\n",
    "              CLEAN_MODEL_DIR/\"clean_model.ckpt\"):\n",
    "        if c.exists():\n",
    "            return c\n",
    "    return None\n",
    "\n",
    "def list_poison_models_recursive(poison_root: Path):\n",
    "    subdirs = [d for d in poison_root.iterdir() if d.is_dir()]\n",
    "    def folder_key(d: Path):\n",
    "        m = re.search(r'(\\d+)$', d.name)\n",
    "        return int(m.group(1)) if m else d.name\n",
    "    subdirs = sorted(subdirs, key=folder_key)\n",
    "\n",
    "    chosen = []\n",
    "    for d in subdirs:\n",
    "        cands = (list(d.rglob(\"*.pt\")) + list(d.rglob(\"*.pth\")) +\n",
    "                 list(d.rglob(\"*.ckpt\")) + list(d.glob(\"*.pt.ckpt\")))\n",
    "        if not cands:\n",
    "            print(f\"[warn] No model file inside {d}\")\n",
    "            continue\n",
    "        def rank(p: Path):\n",
    "            n = p.name.lower()\n",
    "            score = 0\n",
    "            if \"poison\" in n: score += 10\n",
    "            if \"model\"  in n: score += 5\n",
    "            if n.endswith(\".pt\"):  score += 3\n",
    "            if n.endswith(\".pth\"): score += 2\n",
    "            if n.endswith(\".ckpt\"): score += 1\n",
    "            try: sz = p.stat().st_size\n",
    "            except Exception: sz = 0\n",
    "            return (-score, -sz)  # prefer higher score, larger size\n",
    "        best = sorted(cands, key=rank)[0]\n",
    "        chosen.append(best)\n",
    "\n",
    "    def idx_from_path(p: Path):\n",
    "        m = re.search(r'(\\d+)$', p.parent.name)\n",
    "        return int(m.group(1)) if m else None\n",
    "\n",
    "    pairs = [(idx_from_path(p), p) for p in chosen]\n",
    "    pairs.sort(key=lambda t: (10**9 if t[0] is None else t[0]))\n",
    "    return pairs\n",
    "\n",
    "CLEAN_MODEL_PATH = best_clean_model_path()\n",
    "print(f\"[io] Clean model path: {CLEAN_MODEL_PATH}\")\n",
    "\n",
    "CLEAN_MODEL = try_load_model(CLEAN_MODEL_PATH) if CLEAN_MODEL_PATH else GenericModelWrapper(nn.Identity()).to(DEVICE).eval()\n",
    "\n",
    "pairs = list_poison_models_recursive(POISON_DIR)\n",
    "print(f\"[io] Selected {len(pairs)} poisoned model files from subfolders.\")\n",
    "for demo_idx, demo_path in pairs[:5]:\n",
    "    print(\"   \", f\"poisoned_model_{demo_idx}\" if demo_idx is not None else demo_path.parent.name, \"->\", demo_path.name)\n",
    "\n",
    "POISON_MODELS = []\n",
    "for idx, p in pairs[:45]:  # keep first 45\n",
    "    display_name = f\"poisoned_model_{idx}\" if idx is not None else f\"{p.parent.name}::{p.name}\"\n",
    "    POISON_MODELS.append((display_name, try_load_model(p)))\n",
    "\n",
    "print(f\"[models] using {len(POISON_MODELS)} poisoned models\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c1ed3d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.237653Z",
     "iopub.status.busy": "2025-08-27T14:12:18.236528Z",
     "iopub.status.idle": "2025-08-27T14:12:18.272414Z",
     "shell.execute_reply": "2025-08-27T14:12:18.271045Z"
    },
    "papermill": {
     "duration": 0.045524,
     "end_time": "2025-08-27T14:12:18.274882",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.229358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[probe] chosen window length L=512\n"
     ]
    }
   ],
   "source": [
    "# ======================================================\n",
    "# Step 5 — Probe model input length (heuristic & safe)\n",
    "# ======================================================\n",
    "def probe_length(p_model, chans=3):\n",
    "    candidates = [512, 1024, 256, 384, 768, 640, 300, 200]\n",
    "    lo, hi = CHAN_MINS, CHAN_MAXS\n",
    "    for L in candidates:\n",
    "        try:\n",
    "            x = np.stack([\n",
    "                np.stack([\n",
    "                    np.random.uniform(lo[c], hi[c], size=L).astype(np.float32)\n",
    "                    for c in range(chans)\n",
    "                ], axis=1)\n",
    "            ], axis=0)  # [1, L, C]\n",
    "            x = torch.from_numpy(x).to(DEVICE)\n",
    "            with torch.no_grad():\n",
    "                _ = p_model(x)\n",
    "            if L >= TRIG_LEN + 8:\n",
    "                return L\n",
    "        except Exception:\n",
    "            continue\n",
    "    return max(TRIG_LEN + 8, 256)\n",
    "\n",
    "WIN_LEN = probe_length(POISON_MODELS[0][1]) if POISON_MODELS else 512\n",
    "print(f\"[probe] chosen window length L={WIN_LEN}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad65a2be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.286451Z",
     "iopub.status.busy": "2025-08-27T14:12:18.285642Z",
     "iopub.status.idle": "2025-08-27T14:12:18.295244Z",
     "shell.execute_reply": "2025-08-27T14:12:18.293630Z"
    },
    "papermill": {
     "duration": 0.017542,
     "end_time": "2025-08-27T14:12:18.297671",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.280129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ==========================================\n",
    "# Step 6 — Window sampler & trigger blender\n",
    "# ==========================================\n",
    "def sample_windows_from_df(num=16, length=WIN_LEN):\n",
    "    arr = NUM_DF.values.astype(np.float32)\n",
    "    if arr.shape[0] < length:\n",
    "        reps = math.ceil(length / arr.shape[0]) + 1\n",
    "        arr = np.tile(arr, (reps, 1))\n",
    "    # choose evenly spaced starts for stability\n",
    "    starts = np.linspace(0, arr.shape[0]-length, num=min(num, 64), dtype=int)\n",
    "    wins = [arr[s:s+length, :N_CH] for s in starts[:num]]\n",
    "    X = np.stack(wins, axis=0)  # [B, L, C]\n",
    "    return torch.from_numpy(X).to(DEVICE)\n",
    "\n",
    "def inject_trigger(x_win: torch.Tensor, T: torch.Tensor) -> torch.Tensor:\n",
    "    # additive injection into the last TRIG_LEN steps\n",
    "    B, L, C = x_win.shape\n",
    "    y = x_win.clone()\n",
    "    y[:, L-TRIG_LEN:L, :N_CH] = y[:, L-TRIG_LEN:L, :N_CH] + T\n",
    "    return y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c11f2237",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.308898Z",
     "iopub.status.busy": "2025-08-27T14:12:18.308521Z",
     "iopub.status.idle": "2025-08-27T14:12:18.318562Z",
     "shell.execute_reply": "2025-08-27T14:12:18.317393Z"
    },
    "papermill": {
     "duration": 0.017675,
     "end_time": "2025-08-27T14:12:18.320254",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.302579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ======================================\n",
    "# Step 7 — Penalties & helper functions\n",
    "# ======================================\n",
    "def tv_loss(t: torch.Tensor):\n",
    "    if t.dim() == 2: t = t[None, ...]\n",
    "    return (t[:, 1:, :] - t[:, :-1, :]).abs().mean()\n",
    "\n",
    "def fft_highfreq_energy(t: torch.Tensor, cutoff=0.35):\n",
    "    if t.dim() == 2: t = t[None, ...]\n",
    "    f = torch.fft.rfft(t, dim=1)\n",
    "    freqs = torch.linspace(0, 1.0, f.shape[1], device=t.device)\n",
    "    mask = freqs >= cutoff\n",
    "    return (f[:, mask, :].abs()**2).mean()\n",
    "\n",
    "def stage_terms(p_model, c_model, T, hp, win_batch):\n",
    "    x = win_batch\n",
    "    xT = inject_trigger(x, T)\n",
    "    with torch.no_grad():\n",
    "        y_clean = c_model(x) if c_model is not None else x\n",
    "    y_poison = p_model(xT)\n",
    "    delta = (y_poison - y_clean)\n",
    "    delta_mag = torch.sqrt((delta**2).mean() + 1e-8)\n",
    "    track = F.l1_loss(y_poison, xT)\n",
    "    tv = tv_loss(T)\n",
    "    band = fft_highfreq_energy(T, cutoff=hp[\"fft_cut\"])\n",
    "    amp = (T**2).mean()\n",
    "    return delta_mag, track, tv, band, amp\n",
    "\n",
    "def clip_T_(T: torch.Tensor):\n",
    "    with torch.no_grad():\n",
    "        for c in range(N_CH):\n",
    "            span = float(CHAN_MAXS[c] - CHAN_MINS[c])\n",
    "            T[:, c].clamp_(-1.5*span, +1.5*span)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e5465f30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.330057Z",
     "iopub.status.busy": "2025-08-27T14:12:18.329704Z",
     "iopub.status.idle": "2025-08-27T14:12:18.336726Z",
     "shell.execute_reply": "2025-08-27T14:12:18.335621Z"
    },
    "papermill": {
     "duration": 0.013897,
     "end_time": "2025-08-27T14:12:18.338557",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.324660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[hparams] {\n",
      "  \"K_restarts\": 6,\n",
      "  \"steps_adam\": 200,\n",
      "  \"steps_lbfgs\": 12,\n",
      "  \"eval_windows\": 6\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# ======================================\n",
    "# Step 8 — Hyperparameters (tunable)\n",
    "# ======================================\n",
    "HP = {\n",
    "    \"K_restarts_full\": 32,\n",
    "    \"K_restarts_fast\": 6,\n",
    "    \"lr_adam\": 0.05,\n",
    "    \"steps_adam\": 600,\n",
    "    \"steps_lbfgs\": 40,\n",
    "    \"lambda_dev\": 1.0,\n",
    "    \"lambda_track\": 0.2,\n",
    "    \"lambda_tv\": 0.02,\n",
    "    \"lambda_band\": 0.01,\n",
    "    \"lambda_smooth\": 0.02,\n",
    "    \"lambda_amp\": 1e-3,\n",
    "    \"fft_cut\": 0.35,\n",
    "    \"savgol_window\": 9,\n",
    "    \"savgol_poly\": 3,\n",
    "    \"eval_windows\": 12\n",
    "}\n",
    "if MODE == \"fast\":\n",
    "    HP[\"K_restarts\"] = HP[\"K_restarts_fast\"]\n",
    "    HP[\"steps_adam\"] = 200\n",
    "    HP[\"steps_lbfgs\"] = 12\n",
    "    HP[\"eval_windows\"] = 6\n",
    "else:\n",
    "    HP[\"K_restarts\"] = HP[\"K_restarts_full\"]\n",
    "\n",
    "print(\"[hparams]\", json.dumps({k: HP[k] for k in [\"K_restarts\",\"steps_adam\",\"steps_lbfgs\",\"eval_windows\"]}, indent=2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cc2be2d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.349874Z",
     "iopub.status.busy": "2025-08-27T14:12:18.349502Z",
     "iopub.status.idle": "2025-08-27T14:12:18.365107Z",
     "shell.execute_reply": "2025-08-27T14:12:18.363705Z"
    },
    "papermill": {
     "duration": 0.023943,
     "end_time": "2025-08-27T14:12:18.367305",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.343362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ===========================================================\n",
    "# Step 9 — Two-stage optimizer per model (Adam -> LBFGS)\n",
    "# ===========================================================\n",
    "def optimize_one(p_model, c_model, hp, eval_wins):\n",
    "    best = {\"T\": None, \"proxy\": -1e9}\n",
    "\n",
    "    for r in range(hp[\"K_restarts\"]):\n",
    "        # Smooth sinusoids + small noise init\n",
    "        steps = np.linspace(0, 2*np.pi, TRIG_LEN, dtype=np.float32)\n",
    "        init = []\n",
    "        for c in range(N_CH):\n",
    "            ph = np.random.uniform(0, 2*np.pi)\n",
    "            s1 = np.sin(steps * np.random.uniform(0.6,1.3) + ph)\n",
    "            s2 = np.sin(steps * np.random.uniform(0.2,0.5) + ph/2)\n",
    "            v = 0.7*s1 + 0.3*s2 + np.random.normal(0,0.05,TRIG_LEN).astype(np.float32)\n",
    "            v -= v.mean()\n",
    "            init.append(v)\n",
    "        T = torch.tensor(np.stack(init, 1), dtype=torch.float32, device=DEVICE, requires_grad=True)\n",
    "\n",
    "        # Stage A — Adam discovery\n",
    "        opt = torch.optim.Adam([T], lr=hp[\"lr_adam\"])\n",
    "        sched = torch.optim.lr_scheduler.CosineAnnealingLR(opt, T_max=hp[\"steps_adam\"])\n",
    "        last = 0.0; patience=60; stuck=0\n",
    "\n",
    "        for step in range(hp[\"steps_adam\"]):\n",
    "            opt.zero_grad(set_to_none=True)\n",
    "            xb = sample_windows_from_df(num=4, length=WIN_LEN)\n",
    "            d, tr, tv, band, amp = stage_terms(p_model, c_model, T, hp, xb)\n",
    "            loss = (-hp[\"lambda_dev\"]*d + hp[\"lambda_track\"]*tr + hp[\"lambda_tv\"]*tv + hp[\"lambda_band\"]*band)\n",
    "            loss.backward()\n",
    "            torch.nn.utils.clip_grad_norm_([T], 5.0)\n",
    "            opt.step(); clip_T_(T); sched.step()\n",
    "\n",
    "            dm = float(d.detach().cpu().item())\n",
    "            stuck = stuck+1 if abs(dm-last)<1e-5 else 0\n",
    "            last = dm\n",
    "            if stuck > patience: break\n",
    "\n",
    "        # Stage B — LBFGS refine\n",
    "        def closure():\n",
    "            opt2.zero_grad(set_to_none=True)\n",
    "            xb = sample_windows_from_df(num=4, length=WIN_LEN)\n",
    "            d, tr, tv, band, amp = stage_terms(p_model, c_model, T, hp, xb)\n",
    "            lossB = (-hp[\"lambda_dev\"]*d + hp[\"lambda_smooth\"]*amp + hp[\"lambda_tv\"]*tv + hp[\"lambda_amp\"]*amp)\n",
    "            lossB.backward()\n",
    "            return lossB\n",
    "\n",
    "        opt2 = torch.optim.LBFGS([T], max_iter=hp[\"steps_lbfgs\"], line_search_fn=\"strong_wolfe\")\n",
    "        try: opt2.step(closure)\n",
    "        except Exception: pass\n",
    "        clip_T_(T)\n",
    "\n",
    "        # Proxy score: robust Δy mean/std across eval windows + smoothness preference\n",
    "        with torch.no_grad():\n",
    "            deltas=[]\n",
    "            for i in range(eval_wins.shape[0]):\n",
    "                ew = eval_wins[i:i+1]\n",
    "                d, tr, tv, band, amp = stage_terms(p_model, c_model, T, hp, ew)\n",
    "                deltas.append(float(d.detach().cpu().item()))\n",
    "            dm, ds = float(np.mean(deltas)), float(np.std(deltas)+1e-8)\n",
    "            proxy = dm/ds - 0.05*float(tv_loss(T)) - 0.02*float(fft_highfreq_energy(T, cutoff=hp[\"fft_cut\"]))\n",
    "\n",
    "        if proxy > best[\"proxy\"]:\n",
    "            best[\"proxy\"] = proxy\n",
    "            best[\"T\"] = T.detach().clone()\n",
    "\n",
    "    return best[\"T\"], best[\"proxy\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2e10f73f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.379794Z",
     "iopub.status.busy": "2025-08-27T14:12:18.379434Z",
     "iopub.status.idle": "2025-08-27T14:12:18.386856Z",
     "shell.execute_reply": "2025-08-27T14:12:18.385720Z"
    },
    "papermill": {
     "duration": 0.01555,
     "end_time": "2025-08-27T14:12:18.388951",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.373401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =======================================\n",
    "# Step 10 — Ensembling & light smoothing\n",
    "# =======================================\n",
    "def ensemble_triggers(cands, hp):\n",
    "    if not cands:\n",
    "        return torch.zeros(TRIG_LEN, N_CH, device=DEVICE)\n",
    "    stack = torch.stack(cands, 0)           # [K, 75, 3]\n",
    "    med = torch.median(stack, 0).values     # [75, 3]\n",
    "    arr = med.detach().cpu().numpy()\n",
    "    win = hp[\"savgol_window\"] + (1 - hp[\"savgol_window\"] % 2)  # make odd\n",
    "    for c in range(N_CH):\n",
    "        try:\n",
    "            arr[:, c] = savgol_filter(arr[:, c],\n",
    "                                      window_length=min(win, TRIG_LEN-1),\n",
    "                                      polyorder=min(hp[\"savgol_poly\"], 4))\n",
    "        except Exception:\n",
    "            pass\n",
    "    return torch.tensor(arr, dtype=torch.float32, device=DEVICE)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "84819e2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.400859Z",
     "iopub.status.busy": "2025-08-27T14:12:18.400454Z",
     "iopub.status.idle": "2025-08-27T14:12:18.408180Z",
     "shell.execute_reply": "2025-08-27T14:12:18.407218Z"
    },
    "papermill": {
     "duration": 0.015757,
     "end_time": "2025-08-27T14:12:18.409783",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.394026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ======================================================\n",
    "# Step 11 — Orchestrate all models with progress & logs\n",
    "# ======================================================\n",
    "def reconstruct_all(poison_models, clean_model, hp):\n",
    "    results = []\n",
    "    for name, pm in tqdm(poison_models, desc=\"Reconstructing\"):\n",
    "        eval_wins = sample_windows_from_df(num=hp[\"eval_windows\"], length=WIN_LEN)\n",
    "        cands, proxies = [], []\n",
    "        for _ in range(hp[\"K_restarts\"]):\n",
    "            Tbest, pxy = optimize_one(pm, clean_model, hp, eval_wins)\n",
    "            cands.append(Tbest); proxies.append(pxy)\n",
    "        # top-M by proxy\n",
    "        M = min(5, len(cands))\n",
    "        idx = np.argsort(proxies)[::-1][:M]\n",
    "        Tfinal = ensemble_triggers([cands[i] for i in idx], hp)\n",
    "        results.append((name, Tfinal.detach().cpu().numpy()))\n",
    "        print(f\"[ok] {name} | proxy={proxies[idx[0]]:.4f}\")\n",
    "    return results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "24356582",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.420908Z",
     "iopub.status.busy": "2025-08-27T14:12:18.420370Z",
     "iopub.status.idle": "2025-08-27T14:12:18.430258Z",
     "shell.execute_reply": "2025-08-27T14:12:18.429125Z"
    },
    "papermill": {
     "duration": 0.017847,
     "end_time": "2025-08-27T14:12:18.432086",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.414239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =======================================================\n",
    "# Step 12 — Build submission from sample schema (strict)\n",
    "# =======================================================\n",
    "def build_submission(results, sample_path: Path):\n",
    "    sample = pd.read_csv(sample_path)\n",
    "    sub = sample.copy()\n",
    "\n",
    "    triggers = [t for _, t in results]       # list of [75, 3]\n",
    "    M = len(triggers)\n",
    "    flat = [t.reshape(-1) for t in triggers] # each len 225\n",
    "\n",
    "    if len(sub) == M:\n",
    "        # Prefer numeric columns as payload; if that mismatch, use all except first (id/name)\n",
    "        value_cols = [c for c in sub.columns if sub[c].dtype != 'O']\n",
    "        if len(value_cols) != TRIG_LEN*N_CH:\n",
    "            value_cols = list(sub.columns[1:])  # fallback if first column is an id/name\n",
    "        assert len(value_cols) == TRIG_LEN*N_CH, f\"Expected {TRIG_LEN*N_CH} value cols, got {len(value_cols)}\"\n",
    "        for i in range(M):\n",
    "            sub.loc[i, value_cols] = flat[i]\n",
    "    else:\n",
    "        # Single-row schema: concat all triggers\n",
    "        all_flat = np.concatenate(flat, 0)\n",
    "        value_cols = [c for c in sub.columns if c.lower() not in (\"id\",\"model\",\"name\")]\n",
    "        assert len(value_cols) == all_flat.shape[0], \"Sample schema not recognized.\"\n",
    "        sub.loc[0, value_cols] = all_flat\n",
    "\n",
    "    out = Path(\"./submission.csv\")\n",
    "    sub.to_csv(out, index=False)\n",
    "    print(f\"[submit] Wrote {out.resolve()} | shape={sub.shape}\")\n",
    "    return sub\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f1b8252b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:12:18.443146Z",
     "iopub.status.busy": "2025-08-27T14:12:18.442735Z",
     "iopub.status.idle": "2025-08-27T15:02:04.678501Z",
     "shell.execute_reply": "2025-08-27T15:02:04.677204Z"
    },
    "papermill": {
     "duration": 2986.243943,
     "end_time": "2025-08-27T15:02:04.680499",
     "exception": false,
     "start_time": "2025-08-27T14:12:18.436556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b772edf95c9744d5a64f88b361411530",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reconstructing:   0%|          | 0/45 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ok] poisoned_model_1 | proxy=69300.1238\n",
      "[ok] poisoned_model_2 | proxy=65813.0792\n",
      "[ok] poisoned_model_3 | proxy=52698.8846\n",
      "[ok] poisoned_model_4 | proxy=72465.1945\n",
      "[ok] poisoned_model_5 | proxy=67105.6825\n",
      "[ok] poisoned_model_6 | proxy=68954.0642\n",
      "[ok] poisoned_model_7 | proxy=172115.2978\n",
      "[ok] poisoned_model_8 | proxy=78620.1646\n",
      "[ok] poisoned_model_9 | proxy=125791.1743\n",
      "[ok] poisoned_model_10 | proxy=86257.6337\n",
      "[ok] poisoned_model_11 | proxy=68153.7424\n",
      "[ok] poisoned_model_12 | proxy=77653.1068\n",
      "[ok] poisoned_model_13 | proxy=73820.2336\n",
      "[ok] poisoned_model_14 | proxy=141918.1748\n",
      "[ok] poisoned_model_15 | proxy=46026.1276\n",
      "[ok] poisoned_model_16 | proxy=58680.6954\n",
      "[ok] poisoned_model_17 | proxy=59495.8215\n",
      "[ok] poisoned_model_18 | proxy=88138.6860\n",
      "[ok] poisoned_model_19 | proxy=83670.3864\n",
      "[ok] poisoned_model_20 | proxy=76810.7225\n",
      "[ok] poisoned_model_21 | proxy=156268.3222\n",
      "[ok] poisoned_model_22 | proxy=131254.9805\n",
      "[ok] poisoned_model_23 | proxy=61287.6363\n",
      "[ok] poisoned_model_24 | proxy=81620.4859\n",
      "[ok] poisoned_model_25 | proxy=43758.2485\n",
      "[ok] poisoned_model_26 | proxy=54107.9773\n",
      "[ok] poisoned_model_27 | proxy=55603.4361\n",
      "[ok] poisoned_model_28 | proxy=48306.0655\n",
      "[ok] poisoned_model_29 | proxy=49529.6309\n",
      "[ok] poisoned_model_30 | proxy=106426.0471\n",
      "[ok] poisoned_model_31 | proxy=40809.3441\n",
      "[ok] poisoned_model_32 | proxy=140877.3947\n",
      "[ok] poisoned_model_33 | proxy=49377.1016\n",
      "[ok] poisoned_model_34 | proxy=57890.2794\n",
      "[ok] poisoned_model_35 | proxy=109025.4224\n",
      "[ok] poisoned_model_36 | proxy=51731.0293\n",
      "[ok] poisoned_model_37 | proxy=58430.2928\n",
      "[ok] poisoned_model_38 | proxy=76143.8905\n",
      "[ok] poisoned_model_39 | proxy=230746.0601\n",
      "[ok] poisoned_model_40 | proxy=80980.1342\n",
      "[ok] poisoned_model_41 | proxy=59030.7146\n",
      "[ok] poisoned_model_42 | proxy=89078.8197\n",
      "[ok] poisoned_model_43 | proxy=82517.7821\n",
      "[ok] poisoned_model_44 | proxy=120698.0844\n",
      "[ok] poisoned_model_45 | proxy=141525.5682\n",
      "[submit] Wrote /kaggle/working/submission.csv | shape=(45, 226)\n",
      "[done] Ready to submit.\n"
     ]
    }
   ],
   "source": [
    "# ==========================\n",
    "# Step 13 — Run it\n",
    "# ==========================\n",
    "if not POISON_MODELS:\n",
    "    raise RuntimeError(\"No poisoned models discovered. Check POISON_DIR structure.\")\n",
    "\n",
    "results = reconstruct_all(POISON_MODELS, CLEAN_MODEL, HP)\n",
    "_ = build_submission(results, SAMPLE_SUB)\n",
    "print(\"[done] Ready to submit.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "64c56a76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T15:02:04.695701Z",
     "iopub.status.busy": "2025-08-27T15:02:04.695369Z",
     "iopub.status.idle": "2025-08-27T15:02:06.302429Z",
     "shell.execute_reply": "2025-08-27T15:02:06.301369Z"
    },
    "papermill": {
     "duration": 1.616743,
     "end_time": "2025-08-27T15:02:06.304077",
     "exception": false,
     "start_time": "2025-08-27T15:02:04.687334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[diag] Showing 3 of 45 triggers\n",
      "poisoned_model_1: shape=(75, 3) | TV=0.707770 | HF_energy(≥0.35)=24.181778 | min=-16.4579 max=15.6599\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "poisoned_model_2: shape=(75, 3) | TV=0.456991 | HF_energy(≥0.35)=21.034731 | min=-15.8650 max=16.2355\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "poisoned_model_3: shape=(75, 3) | TV=0.350986 | HF_energy(≥0.35)=2.477286 | min=-15.7657 max=15.6446\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[diag] Saved reconstructed_triggers.npy\n"
     ]
    }
   ],
   "source": [
    "# ======================================================\n",
    "# Step 14 — Diagnostics (optional visual sanity checks)\n",
    "# ======================================================\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def tv_np(T):\n",
    "    return float(np.mean(np.abs(np.diff(T, axis=0))))\n",
    "\n",
    "def highfreq_energy_np(T, cutoff=0.35):\n",
    "    F = np.fft.rfft(T, axis=0)\n",
    "    freqs = np.linspace(0, 1.0, F.shape[0])\n",
    "    mask = freqs >= cutoff\n",
    "    return float(np.mean(np.abs(F[mask, :])**2))\n",
    "\n",
    "def plot_trigger_time(T, title):\n",
    "    plt.figure(figsize=(10, 3))\n",
    "    for c in range(min(T.shape[1], 3)):\n",
    "        plt.plot(T[:, c], label=f'ch{c}')\n",
    "    plt.title(title + \" — time domain\")\n",
    "    plt.xlabel(\"t\"); plt.ylabel(\"value\"); plt.legend(); plt.tight_layout(); plt.show()\n",
    "\n",
    "def plot_trigger_spectrum(T, title):\n",
    "    F = np.fft.rfft(T, axis=0)\n",
    "    freqs = np.linspace(0, 1.0, F.shape[0])\n",
    "    plt.figure(figsize=(10, 3))\n",
    "    for c in range(min(T.shape[1], 3)):\n",
    "        plt.plot(freqs, np.abs(F[:, c]), label=f'ch{c}')\n",
    "    plt.title(title + \" — magnitude spectrum\")\n",
    "    plt.xlabel(\"normalized frequency\"); plt.ylabel(\"|FFT|\"); plt.legend(); plt.tight_layout(); plt.show()\n",
    "\n",
    "N_SHOW = 3\n",
    "print(f\"[diag] Showing {min(N_SHOW, len(results))} of {len(results)} triggers\")\n",
    "for name, T_np in results[:N_SHOW]:\n",
    "    tv = tv_np(T_np)\n",
    "    hf = highfreq_energy_np(T_np, cutoff=0.35)\n",
    "    print(f\"{name}: shape={T_np.shape} | TV={tv:.6f} | HF_energy(≥0.35)={hf:.6f} | min={T_np.min():.4f} max={T_np.max():.4f}\")\n",
    "    plot_trigger_time(T_np, name)\n",
    "    plot_trigger_spectrum(T_np, name)\n",
    "\n",
    "# Save all reconstructed triggers for further analysis\n",
    "np.save(\"reconstructed_triggers.npy\", np.stack([t for _, t in results], axis=0))\n",
    "print(\"[diag] Saved reconstructed_triggers.npy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "85b7b0d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T15:02:06.328605Z",
     "iopub.status.busy": "2025-08-27T15:02:06.328228Z",
     "iopub.status.idle": "2025-08-27T15:02:06.385572Z",
     "shell.execute_reply": "2025-08-27T15:02:06.384405Z"
    },
    "papermill": {
     "duration": 0.071336,
     "end_time": "2025-08-27T15:02:06.387482",
     "exception": false,
     "start_time": "2025-08-27T15:02:06.316146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[check] submission shape: (45, 226)\n",
      "[check] sample shape    : (45, 226)\n",
      "[check] Column schema OK ✅\n",
      "[check] No NaN/Inf in numeric values ✅\n",
      "[check] Value range: min = -17.087419509887695 | max = 45.0\n",
      "[check] Looks non-degenerate ✅\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_id</th>\n",
       "      <th>channel_44_1</th>\n",
       "      <th>channel_44_2</th>\n",
       "      <th>channel_44_3</th>\n",
       "      <th>channel_44_4</th>\n",
       "      <th>channel_44_5</th>\n",
       "      <th>channel_44_6</th>\n",
       "      <th>channel_44_7</th>\n",
       "      <th>channel_44_8</th>\n",
       "      <th>channel_44_9</th>\n",
       "      <th>...</th>\n",
       "      <th>channel_46_66</th>\n",
       "      <th>channel_46_67</th>\n",
       "      <th>channel_46_68</th>\n",
       "      <th>channel_46_69</th>\n",
       "      <th>channel_46_70</th>\n",
       "      <th>channel_46_71</th>\n",
       "      <th>channel_46_72</th>\n",
       "      <th>channel_46_73</th>\n",
       "      <th>channel_46_74</th>\n",
       "      <th>channel_46_75</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-16.449656</td>\n",
       "      <td>-1.454816</td>\n",
       "      <td>0.566188</td>\n",
       "      <td>-1.589421</td>\n",
       "      <td>-1.454816</td>\n",
       "      <td>1.719515</td>\n",
       "      <td>6.080968</td>\n",
       "      <td>-1.454816</td>\n",
       "      <td>1.910999</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.377923</td>\n",
       "      <td>-15.076142</td>\n",
       "      <td>-1.454816</td>\n",
       "      <td>-1.851740</td>\n",
       "      <td>-15.416080</td>\n",
       "      <td>-1.454816</td>\n",
       "      <td>-1.801369</td>\n",
       "      <td>-15.218939</td>\n",
       "      <td>-1.454816</td>\n",
       "      <td>-1.018839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-7.082521</td>\n",
       "      <td>-1.240035</td>\n",
       "      <td>1.501180</td>\n",
       "      <td>-12.684869</td>\n",
       "      <td>-1.806739</td>\n",
       "      <td>1.491567</td>\n",
       "      <td>-12.969924</td>\n",
       "      <td>-1.698476</td>\n",
       "      <td>1.491567</td>\n",
       "      <td>...</td>\n",
       "      <td>1.496694</td>\n",
       "      <td>-15.105429</td>\n",
       "      <td>-1.658282</td>\n",
       "      <td>1.496694</td>\n",
       "      <td>-15.297776</td>\n",
       "      <td>-1.712487</td>\n",
       "      <td>1.496694</td>\n",
       "      <td>-15.617185</td>\n",
       "      <td>-1.256187</td>\n",
       "      <td>1.496694</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 226 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   model_id  channel_44_1  channel_44_2  channel_44_3  channel_44_4  \\\n",
       "0         1    -16.449656     -1.454816      0.566188     -1.589421   \n",
       "1         2     -7.082521     -1.240035      1.501180    -12.684869   \n",
       "\n",
       "   channel_44_5  channel_44_6  channel_44_7  channel_44_8  channel_44_9  ...  \\\n",
       "0     -1.454816      1.719515      6.080968     -1.454816      1.910999  ...   \n",
       "1     -1.806739      1.491567    -12.969924     -1.698476      1.491567  ...   \n",
       "\n",
       "   channel_46_66  channel_46_67  channel_46_68  channel_46_69  channel_46_70  \\\n",
       "0      -1.377923     -15.076142      -1.454816      -1.851740     -15.416080   \n",
       "1       1.496694     -15.105429      -1.658282       1.496694     -15.297776   \n",
       "\n",
       "   channel_46_71  channel_46_72  channel_46_73  channel_46_74  channel_46_75  \n",
       "0      -1.454816      -1.801369     -15.218939      -1.454816      -1.018839  \n",
       "1      -1.712487       1.496694     -15.617185      -1.256187       1.496694  \n",
       "\n",
       "[2 rows x 226 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Final sanity checks before submitting\n",
    "import pandas as pd, numpy as np, os, json, textwrap\n",
    "\n",
    "sub_path = \"submission.csv\"\n",
    "sample_path = \"/kaggle/input/trojan-horse-hunt-in-space/sample_submission_solution.csv\"\n",
    "\n",
    "sub = pd.read_csv(sub_path)\n",
    "sample = pd.read_csv(sample_path)\n",
    "\n",
    "print(\"[check] submission shape:\", sub.shape)\n",
    "print(\"[check] sample shape    :\", sample.shape)\n",
    "\n",
    "# 1) Columns identical (names & order)\n",
    "assert list(sub.columns) == list(sample.columns), \"Column schema mismatch vs sample!\"\n",
    "print(\"[check] Column schema OK ✅\")\n",
    "\n",
    "# 2) No NaN/Inf in numeric payload\n",
    "num = sub.select_dtypes(include=[np.number]).values\n",
    "assert np.isfinite(num).all(), \"Found NaN/Inf in numeric values!\"\n",
    "print(\"[check] No NaN/Inf in numeric values ✅\")\n",
    "\n",
    "# 3) Quick value sanity (not all zeros and reasonable scale)\n",
    "print(\"[check] Value range: min =\", float(num.min()), \"| max =\", float(num.max()))\n",
    "assert not np.allclose(num, 0), \"All-zero submission — something's off.\"\n",
    "print(\"[check] Looks non-degenerate ✅\")\n",
    "\n",
    "# Peek a couple rows (optional)\n",
    "display(sub.head(2))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12513485,
     "sourceId": 101039,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3009.664495,
   "end_time": "2025-08-27T15:02:08.841088",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T14:11:59.176593",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "2e7e81c9a1ec41fcb3ab66681ecae54e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4fa1365bba264525a39ca676e6800949",
       "placeholder": "​",
       "style": "IPY_MODEL_85fee0f42c9d40aa89fb05139ea28c20",
       "tabbable": null,
       "tooltip": null,
       "value": "Reconstructing: 100%"
      }
     },
     "34e745661f5448c8ade69215b8980570": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_db31a29186904742bdb63074c59ea5c0",
       "placeholder": "​",
       "style": "IPY_MODEL_d9cb8357b99947f7b0beb079fe9618f6",
       "tabbable": null,
       "tooltip": null,
       "value": " 45/45 [49:44&lt;00:00, 66.25s/it]"
      }
     },
     "4fa1365bba264525a39ca676e6800949": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ad4a95bfab643798f864fec03a65007": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "85fee0f42c9d40aa89fb05139ea28c20": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b772edf95c9744d5a64f88b361411530": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2e7e81c9a1ec41fcb3ab66681ecae54e",
        "IPY_MODEL_d77366fba9b34c76a2892632712304da",
        "IPY_MODEL_34e745661f5448c8ade69215b8980570"
       ],
       "layout": "IPY_MODEL_7ad4a95bfab643798f864fec03a65007",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bd3df6e3dff841e782b5dd35ff8961e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d77366fba9b34c76a2892632712304da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f7447358fbbf4067ad8056f1aec16032",
       "max": 45.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_bd3df6e3dff841e782b5dd35ff8961e8",
       "tabbable": null,
       "tooltip": null,
       "value": 45.0
      }
     },
     "d9cb8357b99947f7b0beb079fe9618f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "db31a29186904742bdb63074c59ea5c0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f7447358fbbf4067ad8056f1aec16032": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
